
# =========================
# ✅ Reusable RabbitMQ Pattern (Scalable)
# =========================

# src/rabbit/connection.js
import amqp from 'amqplib';

let connection;
let channel;

export const connectRabbitMQ = async () => {
  try {
    connection = await amqp.connect(process.env.RABBITMQ_URL);
    channel = await connection.createChannel();
    console.log('✅ Connected to RabbitMQ');
  } catch (err) {
    console.error('❌ RabbitMQ connection error:', err);
  }
};

export const getChannel = () => channel;


# src/rabbit/consumer.js
import { getChannel } from './connection.js';

export const listenQueue = async (queueName, handler) => {
  const channel = getChannel();
  await channel.assertQueue(queueName);

  channel.consume(queueName, async (msg) => {
    const payload = JSON.parse(msg.content.toString());
    const response = await handler(payload);

    channel.sendToQueue(
      msg.properties.replyTo,
      Buffer.from(JSON.stringify(response)),
      { correlationId: msg.properties.correlationId }
    );

    channel.ack(msg);
  });

  console.log(`👂 Listening on queue: ${queueName}`);
};


# src/rabbit/consumerConnections.js
import User from '../models/user.model.js';
import { listenQueue } from './consumer.js';

export const listenForUserRequests = async () => {
  await listenQueue('get-user', async (userId) => {
    const user = await User.findById(userId).select('-password');
    return user;
  });
};


# src/rabbit/index.js
import { listenForUserRequests } from './consumerConnections.js';

export const startConsumers = async () => {
  try {
    await listenForUserRequests();
    console.log('✅ Consumers started.');
  } catch (err) {
    console.error('❌ Error starting consumers:', err);
    throw err;
  }
};

main index.js page call
connectRabbitMQ()
tartConsumers()

# src/rabbit/producer.js
import { getChannel } from './connection.js';
import { v4 as uuidv4 } from 'uuid';

export const sendRPC = async (queueName, payload) => {
  const channel = getChannel();
  const correlationId = uuidv4();
  const replyQueue = await channel.assertQueue('', { exclusive: true });

  return new Promise((resolve, reject) => {
    channel.consume(
      replyQueue.queue,
      (msg) => {
        if (msg.properties.correlationId === correlationId) {
          const response = JSON.parse(msg.content.toString());
          resolve(response);
        }
      },
      { noAck: true }
    );

    channel.sendToQueue(queueName, Buffer.from(JSON.stringify(payload)), {
      correlationId,
      replyTo: replyQueue.queue,
    });

    setTimeout(() => {
      reject(new Error('⏰ Timeout: No response from RabbitMQ'));
    }, 5000);
  });
};


# Example usage in controller (User Service)
import { sendRPC } from '../rabbit/producer.js';

export const getProfile = async (req, res) => {
  try {
    const user = await sendRPC('get-user', req.user.id);
    res.status(200).json(user);
  } catch (err) {
    console.error('RPC error:', err);
    res.status(500).json({ message: 'Could not fetch user profile' });
  }
};

main index.js
connectRabbitMQ   => only need this one



# =========================
# ❌ Normal (Non-Reusable) RabbitMQ Code (For Simple Use)
# =========================

# Connection (used in both services)
import amqp from 'amqplib';

let connection;
let channel;

export const connectRabbitMQ = async () => {
  try {
    connection = await amqp.connect(process.env.RABBITMQ_URL);
    channel = await connection.createChannel();
    console.log('✅ Connected to RabbitMQ');
  } catch (err) {
    console.error('❌ RabbitMQ connection error:', err);
  }
};

export const getChannel = () => channel;


# Auth Service: Direct Consumer Example
import User from '../models/user.model.js';
import { getChannel } from '../utils/rabbitmq.js';

export const listenForUserRequests = async () => {
  const channel = getChannel();
  await channel.assertQueue('get-user');

  channel.consume('get-user', async (msg) => {
    const userId = msg.content.toString();
    try {
      const user = await User.findById(userId).select('-password');
      const response = JSON.stringify(user);

      channel.sendToQueue(msg.properties.replyTo, Buffer.from(response), {
        correlationId: msg.properties.correlationId,
      });

      channel.ack(msg);
    } catch (err) {
      console.error('Failed to get user:', err);
      channel.ack(msg);
    }
  });

  console.log('👂 auth-service listening on `get-user` queue...');
};


# User Service: Direct Producer Example
import { getChannel } from '../utils/rabbitmq.js';
import { v4 as uuidv4 } from 'uuid';

export const getProfile = async (req, res) => {
  const userId = req.user.id;

  try {
    const channel = getChannel();
    const correlationId = uuidv4();
    const replyQueue = await channel.assertQueue('', { exclusive: true });

    channel.sendToQueue('get-user', Buffer.from(userId), {
      correlationId,
      replyTo: replyQueue.queue,
    });

    channel.consume(
      replyQueue.queue,
      (msg) => {
        if (msg.properties.correlationId === correlationId) {
          const userData = JSON.parse(msg.content.toString());
          return res.status(200).json(userData);
        }
      },
      { noAck: true }
    );
  } catch (err) {
    console.error('Error fetching profile:', err);
    res.status(500).json({ message: 'Error fetching user profile' });
  }
};
